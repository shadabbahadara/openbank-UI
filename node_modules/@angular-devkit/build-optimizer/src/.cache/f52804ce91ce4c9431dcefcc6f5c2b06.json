{"remainingRequest":"/tmp/as-web-app/openbank-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/tmp/as-web-app/openbank-ui/node_modules/angular-archwizard/esm5/angular-archwizard.js","dependencies":[{"path":"/tmp/as-web-app/openbank-ui/node_modules/angular-archwizard/esm5/angular-archwizard.js","mtime":1521819095000},{"path":"/tmp/as-web-app/openbank-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/tmp/as-web-app/openbank-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __extends, __spread, __values } from 'tslib';\nimport { Directive, TemplateRef, ContentChild, EventEmitter, HostBinding, Input, Output, Injectable, Component, ContentChildren, ViewEncapsulation, forwardRef, Host, HostListener, Optional, NgModule } from '@angular/core';\nimport { isBoolean } from 'util';\nimport { CommonModule } from '@angular/common';\nvar WizardStepTitleDirective = /** @class */ /*@__PURE__*/ (function () {\n    function WizardStepTitleDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    return WizardStepTitleDirective;\n}());\nvar WizardStep = /** @class */ /*@__PURE__*/ (function () {\n    function WizardStep() {\n        this.navigationSymbol = { symbol: '' };\n        this.completed = false;\n        this.selected = false;\n        this.defaultSelected = false;\n        this.optional = false;\n        this.canEnter = true;\n        this.canExit = true;\n        this.stepEnter = new EventEmitter();\n        this.stepExit = new EventEmitter();\n    }\n    Object.defineProperty(WizardStep.prototype, \"hidden\", {\n        get: function () {\n            return !this.selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WizardStep.canTransitionStep = function (condition, direction) {\n        if (isBoolean(condition)) {\n            return Promise.resolve((condition));\n        }\n        else if (condition instanceof Function) {\n            return Promise.resolve(condition(direction));\n        }\n        else {\n            return Promise.reject(new Error(\"Input value '\" + condition + \"' is neither a boolean nor a function\"));\n        }\n    };\n    WizardStep.prototype.enter = function (direction) {\n        this.stepEnter.emit(direction);\n    };\n    WizardStep.prototype.exit = function (direction) {\n        this.stepExit.emit(direction);\n    };\n    WizardStep.prototype.canEnterStep = function (direction) {\n        return WizardStep.canTransitionStep(this.canEnter, direction);\n    };\n    WizardStep.prototype.canExitStep = function (direction) {\n        return WizardStep.canTransitionStep(this.canExit, direction);\n    };\n    return WizardStep;\n}());\nvar MovingDirection = /*@__PURE__*/ (function () {\n    var MovingDirection = {\n        Forwards: 0,\n        Backwards: 1,\n        Stay: 2,\n    };\n    MovingDirection[MovingDirection.Forwards] = \"Forwards\";\n    MovingDirection[MovingDirection.Backwards] = \"Backwards\";\n    MovingDirection[MovingDirection.Stay] = \"Stay\";\n    return MovingDirection;\n}());\nvar NavigationMode = /** @class */ /*@__PURE__*/ (function () {\n    function NavigationMode(wizardState) {\n        this.wizardState = wizardState;\n    }\n    NavigationMode.prototype.goToPreviousStep = function (preFinalize, postFinalize) {\n        if (this.wizardState.hasPreviousStep()) {\n            this.goToStep(this.wizardState.currentStepIndex - 1, preFinalize, postFinalize);\n        }\n    };\n    NavigationMode.prototype.goToNextStep = function (preFinalize, postFinalize) {\n        if (this.wizardState.hasNextStep()) {\n            this.goToStep(this.wizardState.currentStepIndex + 1, preFinalize, postFinalize);\n        }\n    };\n    return NavigationMode;\n}());\nvar FreeNavigationMode = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(FreeNavigationMode, _super);\n    function FreeNavigationMode(wizardState) {\n        return _super.call(this, wizardState) || this;\n    }\n    FreeNavigationMode.prototype.canGoToStep = function (destinationIndex) {\n        var _this = this;\n        var hasStep = this.wizardState.hasStep(destinationIndex);\n        var movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n        var canExitCurrentStep = function (previous) {\n            return previous ? _this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n        };\n        var canEnterDestinationStep = function (previous) {\n            return previous ? _this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n        };\n        return Promise.resolve(hasStep)\n            .then(canExitCurrentStep)\n            .then(canEnterDestinationStep);\n    };\n    FreeNavigationMode.prototype.goToStep = function (destinationIndex, preFinalize, postFinalize) {\n        var _this = this;\n        this.canGoToStep(destinationIndex).then(function (navigationAllowed) {\n            if (navigationAllowed) {\n                var movingDirection = _this.wizardState.getMovingDirection(destinationIndex);\n                if (preFinalize) {\n                    preFinalize.emit();\n                }\n                _this.wizardState.currentStep.completed = true;\n                _this.wizardState.currentStep.exit(movingDirection);\n                _this.wizardState.currentStep.selected = false;\n                _this.wizardState.currentStepIndex = destinationIndex;\n                _this.wizardState.currentStep.enter(movingDirection);\n                _this.wizardState.currentStep.selected = true;\n                if (postFinalize) {\n                    postFinalize.emit();\n                }\n            }\n            else {\n                _this.wizardState.currentStep.exit(MovingDirection.Stay);\n                _this.wizardState.currentStep.enter(MovingDirection.Stay);\n            }\n        });\n    };\n    FreeNavigationMode.prototype.isNavigable = function (destinationIndex) {\n        return true;\n    };\n    FreeNavigationMode.prototype.reset = function () {\n        if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n            throw new Error(\"The wizard doesn't contain a step with index \" + this.wizardState.defaultStepIndex);\n        }\n        this.wizardState.wizardSteps.forEach(function (step) {\n            step.completed = false;\n            step.selected = false;\n        });\n        this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n        this.wizardState.currentStep.selected = true;\n        this.wizardState.currentStep.enter(MovingDirection.Forwards);\n    };\n    return FreeNavigationMode;\n}(NavigationMode));\nvar WizardCompletionStep = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(WizardCompletionStep, _super);\n    function WizardCompletionStep() {\n        var _this = _super.apply(this, __spread(arguments)) || this;\n        _this.stepExit = new EventEmitter();\n        _this.canExit = false;\n        return _this;\n    }\n    WizardCompletionStep.prototype.enter = function (direction) {\n        this.completed = true;\n        this.stepEnter.emit(direction);\n    };\n    WizardCompletionStep.prototype.exit = function (direction) {\n        this.completed = false;\n        this.stepExit.emit(direction);\n    };\n    return WizardCompletionStep;\n}(WizardStep));\nvar SemiStrictNavigationMode = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(SemiStrictNavigationMode, _super);\n    function SemiStrictNavigationMode(wizardState) {\n        return _super.call(this, wizardState) || this;\n    }\n    SemiStrictNavigationMode.prototype.canGoToStep = function (destinationIndex) {\n        var _this = this;\n        var hasStep = this.wizardState.hasStep(destinationIndex);\n        var movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n        var canExitCurrentStep = function (previous) {\n            return previous ? _this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n        };\n        var canEnterDestinationStep = function (previous) {\n            return previous ? _this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n        };\n        var destinationStep = function (previous) {\n            if (previous) {\n                var allNormalStepsCompleted = _this.wizardState.wizardSteps\n                    .filter(function (step, index) { return index < destinationIndex; })\n                    .every(function (step) { return step.completed || step.optional || step.selected; });\n                return Promise.resolve(!(_this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) || allNormalStepsCompleted);\n            }\n            else {\n                return Promise.resolve(false);\n            }\n        };\n        return Promise.resolve(hasStep)\n            .then(canExitCurrentStep)\n            .then(canEnterDestinationStep)\n            .then(destinationStep);\n    };\n    SemiStrictNavigationMode.prototype.goToStep = function (destinationIndex, preFinalize, postFinalize) {\n        var _this = this;\n        this.canGoToStep(destinationIndex).then(function (navigationAllowed) {\n            if (navigationAllowed) {\n                var movingDirection = _this.wizardState.getMovingDirection(destinationIndex);\n                if (preFinalize) {\n                    preFinalize.emit();\n                }\n                _this.wizardState.currentStep.completed = true;\n                _this.wizardState.currentStep.exit(movingDirection);\n                _this.wizardState.currentStep.selected = false;\n                _this.wizardState.currentStepIndex = destinationIndex;\n                _this.wizardState.currentStep.enter(movingDirection);\n                _this.wizardState.currentStep.selected = true;\n                if (postFinalize) {\n                    postFinalize.emit();\n                }\n            }\n            else {\n                _this.wizardState.currentStep.exit(MovingDirection.Stay);\n                _this.wizardState.currentStep.enter(MovingDirection.Stay);\n            }\n        });\n    };\n    SemiStrictNavigationMode.prototype.isNavigable = function (destinationIndex) {\n        if (this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) {\n            return this.wizardState.wizardSteps.filter(function (step, index) { return index < destinationIndex; })\n                .every(function (step) { return step.completed || step.optional || step.selected; });\n        }\n        else {\n            return true;\n        }\n    };\n    SemiStrictNavigationMode.prototype.reset = function () {\n        if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n            throw new Error(\"The wizard doesn't contain a step with index \" + this.wizardState.defaultStepIndex);\n        }\n        var defaultCompletionStep = this.wizardState.getStepAtIndex(this.wizardState.defaultStepIndex) instanceof WizardCompletionStep &&\n            this.wizardState.wizardSteps.length !== 1;\n        if (defaultCompletionStep) {\n            throw new Error(\"The default step index \" + this.wizardState.defaultStepIndex + \" references a completion step\");\n        }\n        this.wizardState.wizardSteps.forEach(function (step) {\n            step.completed = false;\n            step.selected = false;\n        });\n        this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n        this.wizardState.currentStep.selected = true;\n        this.wizardState.currentStep.enter(MovingDirection.Forwards);\n    };\n    return SemiStrictNavigationMode;\n}(NavigationMode));\nvar StrictNavigationMode = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(StrictNavigationMode, _super);\n    function StrictNavigationMode(wizardState) {\n        return _super.call(this, wizardState) || this;\n    }\n    StrictNavigationMode.prototype.canGoToStep = function (destinationIndex) {\n        var _this = this;\n        var hasStep = this.wizardState.hasStep(destinationIndex);\n        var movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n        var canExitCurrentStep = function (previous) {\n            return previous ? _this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n        };\n        var canEnterDestinationStep = function (previous) {\n            return previous ? _this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n        };\n        var allPreviousStepsComplete = function (previous) {\n            if (previous) {\n                return Promise.resolve(_this.wizardState.wizardSteps\n                    .filter(function (step, index) { return index < destinationIndex && index !== _this.wizardState.currentStepIndex; })\n                    .every(function (step) { return step.completed || step.optional; }));\n            }\n            else {\n                return Promise.resolve(false);\n            }\n        };\n        return Promise.resolve(hasStep)\n            .then(canExitCurrentStep)\n            .then(canEnterDestinationStep)\n            .then(allPreviousStepsComplete);\n    };\n    StrictNavigationMode.prototype.goToStep = function (destinationIndex, preFinalize, postFinalize) {\n        var _this = this;\n        this.canGoToStep(destinationIndex).then(function (navigationAllowed) {\n            if (navigationAllowed) {\n                var movingDirection = _this.wizardState.getMovingDirection(destinationIndex);\n                if (preFinalize) {\n                    preFinalize.emit();\n                }\n                _this.wizardState.currentStep.completed = true;\n                _this.wizardState.currentStep.exit(movingDirection);\n                _this.wizardState.currentStep.selected = false;\n                _this.wizardState.wizardSteps\n                    .filter(function (step, index) { return _this.wizardState.currentStepIndex > destinationIndex && index > destinationIndex; })\n                    .forEach(function (step) { return step.completed = false; });\n                _this.wizardState.currentStepIndex = destinationIndex;\n                _this.wizardState.currentStep.enter(movingDirection);\n                _this.wizardState.currentStep.selected = true;\n                if (postFinalize) {\n                    postFinalize.emit();\n                }\n            }\n            else {\n                _this.wizardState.currentStep.exit(MovingDirection.Stay);\n                _this.wizardState.currentStep.enter(MovingDirection.Stay);\n            }\n        });\n    };\n    StrictNavigationMode.prototype.isNavigable = function (destinationIndex) {\n        return destinationIndex < this.wizardState.currentStepIndex;\n    };\n    StrictNavigationMode.prototype.reset = function () {\n        var _this = this;\n        if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n            throw new Error(\"The wizard doesn't contain a step with index \" + this.wizardState.defaultStepIndex);\n        }\n        var illegalDefaultStep = this.wizardState.wizardSteps\n            .filter(function (step, index) { return index < _this.wizardState.defaultStepIndex; })\n            .some(function (step) { return !step.optional; });\n        if (illegalDefaultStep) {\n            throw new Error(\"The default step index \" + this.wizardState.defaultStepIndex + \" is located after a non optional step\");\n        }\n        this.wizardState.wizardSteps.forEach(function (step) {\n            step.completed = false;\n            step.selected = false;\n        });\n        this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n        this.wizardState.currentStep.selected = true;\n        this.wizardState.currentStep.enter(MovingDirection.Forwards);\n    };\n    return StrictNavigationMode;\n}(NavigationMode));\nfunction navigationModeFactory(navigationMode, wizardState) {\n    switch (navigationMode) {\n        case 'free':\n            return new FreeNavigationMode(wizardState);\n        case 'semi-strict':\n            return new SemiStrictNavigationMode(wizardState);\n        case 'strict':\n        default:\n            return new StrictNavigationMode(wizardState);\n    }\n}\nvar WizardState = /** @class */ /*@__PURE__*/ (function () {\n    function WizardState() {\n        this._defaultStepIndex = 0;\n        this.wizardSteps = [];\n        this.currentStepIndex = -1;\n    }\n    Object.defineProperty(WizardState.prototype, \"defaultStepIndex\", {\n        get: function () {\n            var foundDefaultStep = this.wizardSteps.find(function (step) { return step.defaultSelected; });\n            if (foundDefaultStep) {\n                return this.getIndexOfStep(foundDefaultStep);\n            }\n            else {\n                return this._defaultStepIndex;\n            }\n        },\n        set: function (defaultStepIndex) {\n            this._defaultStepIndex = defaultStepIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardState.prototype, \"currentStep\", {\n        get: function () {\n            if (this.hasStep(this.currentStepIndex)) {\n                return this.wizardSteps[this.currentStepIndex];\n            }\n            else {\n                return null;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardState.prototype, \"completed\", {\n        get: function () {\n            return this.wizardSteps.every(function (step) { return step.completed || step.optional; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WizardState.prototype.updateNavigationMode = function (updatedNavigationMode) {\n        this.navigationMode = navigationModeFactory(updatedNavigationMode, this);\n    };\n    WizardState.prototype.updateWizardSteps = function (updatedWizardSteps) {\n        if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n            this.currentStepIndex = updatedWizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n        }\n        this.wizardSteps = updatedWizardSteps;\n    };\n    WizardState.prototype.hasStep = function (stepIndex) {\n        return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n    };\n    WizardState.prototype.hasPreviousStep = function () {\n        return this.hasStep(this.currentStepIndex - 1);\n    };\n    WizardState.prototype.hasNextStep = function () {\n        return this.hasStep(this.currentStepIndex + 1);\n    };\n    WizardState.prototype.isLastStep = function () {\n        return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n    };\n    WizardState.prototype.getStepAtIndex = function (stepIndex) {\n        if (!this.hasStep(stepIndex)) {\n            throw new Error(\"Expected a known step, but got stepIndex: \" + stepIndex + \".\");\n        }\n        return this.wizardSteps[stepIndex];\n    };\n    WizardState.prototype.getIndexOfStepWithId = function (stepId) {\n        return this.wizardSteps.findIndex(function (step) { return step.stepId === stepId; });\n    };\n    WizardState.prototype.getIndexOfStep = function (step) {\n        return this.wizardSteps.indexOf(step);\n    };\n    WizardState.prototype.getMovingDirection = function (destinationStep) {\n        var movingDirection;\n        if (destinationStep > this.currentStepIndex) {\n            movingDirection = MovingDirection.Forwards;\n        }\n        else if (destinationStep < this.currentStepIndex) {\n            movingDirection = MovingDirection.Backwards;\n        }\n        else {\n            movingDirection = MovingDirection.Stay;\n        }\n        return movingDirection;\n    };\n    return WizardState;\n}());\nvar WizardComponent = /** @class */ /*@__PURE__*/ (function () {\n    function WizardComponent(model) {\n        this.model = model;\n        this.navBarLocation = 'top';\n        this.navBarLayout = 'small';\n        this.navBarDirection = 'left-to-right';\n        this.navigationMode = 'strict';\n        this.defaultStepIndex = 0;\n        this.disableNavigationBar = false;\n    }\n    Object.defineProperty(WizardComponent.prototype, \"horizontalOrientation\", {\n        get: function () {\n            return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardComponent.prototype, \"verticalOrientation\", {\n        get: function () {\n            return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardComponent.prototype, \"navigation\", {\n        get: function () {\n            return this.model.navigationMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WizardComponent.prototype.ngOnChanges = function (changes) {\n        try {\n            for (var _a = __values(Object.keys(changes)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var propName = _b.value;\n                var change = changes[propName];\n                if (!change.firstChange) {\n                    switch (propName) {\n                        case 'defaultStepIndex':\n                            this.model.defaultStepIndex = parseInt(change.currentValue, 10);\n                            break;\n                        case 'disableNavigationBar':\n                            this.model.disableNavigationBar = change.currentValue;\n                            break;\n                        case 'navigationMode':\n                            this.model.updateNavigationMode(change.currentValue);\n                            break;\n                        default:\n                    }\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return))\n                    _c.call(_a);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n        var e_1, _c;\n    };\n    WizardComponent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.wizardSteps.changes.subscribe(function (changedWizardSteps) {\n            _this.model.updateWizardSteps(changedWizardSteps.toArray());\n        });\n        this.model.disableNavigationBar = this.disableNavigationBar;\n        this.model.defaultStepIndex = this.defaultStepIndex;\n        this.model.updateWizardSteps(this.wizardSteps.toArray());\n        this.model.updateNavigationMode(this.navigationMode);\n        this.navigation.reset();\n    };\n    return WizardComponent;\n}());\nvar WizardCompletionStepComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(WizardCompletionStepComponent, _super);\n    function WizardCompletionStepComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return WizardCompletionStepComponent;\n}(WizardCompletionStep));\nvar WizardNavigationBarComponent = /** @class */ /*@__PURE__*/ (function () {\n    function WizardNavigationBarComponent(wizardState) {\n        this.wizardState = wizardState;\n        this.direction = 'left-to-right';\n    }\n    Object.defineProperty(WizardNavigationBarComponent.prototype, \"navigationMode\", {\n        get: function () {\n            return this.wizardState.navigationMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardNavigationBarComponent.prototype, \"wizardSteps\", {\n        get: function () {\n            switch (this.direction) {\n                case 'right-to-left':\n                    return this.wizardState.wizardSteps.slice().reverse();\n                case 'left-to-right':\n                default:\n                    return this.wizardState.wizardSteps;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WizardNavigationBarComponent.prototype, \"numberOfWizardSteps\", {\n        get: function () {\n            return this.wizardState.wizardSteps.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WizardNavigationBarComponent.prototype.isCurrent = function (wizardStep) {\n        return wizardStep.selected && !wizardStep.completed && !this.wizardState.completed;\n    };\n    WizardNavigationBarComponent.prototype.isDone = function (wizardStep) {\n        return (wizardStep.completed && !wizardStep.selected) || this.wizardState.completed;\n    };\n    WizardNavigationBarComponent.prototype.isDefault = function (wizardStep) {\n        return !wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\n    };\n    WizardNavigationBarComponent.prototype.isEditing = function (wizardStep) {\n        return wizardStep.selected && wizardStep.completed && !this.wizardState.completed;\n    };\n    WizardNavigationBarComponent.prototype.isOptional = function (wizardStep) {\n        return wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\n    };\n    WizardNavigationBarComponent.prototype.isNavigable = function (wizardStep) {\n        return !wizardStep.selected && !this.wizardState.disableNavigationBar &&\n            this.navigationMode.isNavigable(this.wizardState.getIndexOfStep(wizardStep));\n    };\n    return WizardNavigationBarComponent;\n}());\nvar WizardStepComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(WizardStepComponent, _super);\n    function WizardStepComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return WizardStepComponent;\n}(WizardStep));\nvar EnableBackLinksDirective = /** @class */ /*@__PURE__*/ (function () {\n    function EnableBackLinksDirective(completionStep) {\n        this.completionStep = completionStep;\n        this.stepExit = new EventEmitter();\n    }\n    EnableBackLinksDirective.prototype.ngOnInit = function () {\n        this.completionStep.canExit = true;\n        this.completionStep.stepExit = this.stepExit;\n    };\n    return EnableBackLinksDirective;\n}());\nfunction isStepOffset(value) {\n    return value.hasOwnProperty('stepOffset');\n}\nfunction isStepId(value) {\n    return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\nfunction isStepIndex(value) {\n    return value.hasOwnProperty('stepIndex');\n}\nvar GoToStepDirective = /** @class */ /*@__PURE__*/ (function () {\n    function GoToStepDirective(wizardState, wizardStep) {\n        this.wizardState = wizardState;\n        this.wizardStep = wizardStep;\n        this.preFinalize = new EventEmitter();\n        this.postFinalize = new EventEmitter();\n    }\n    Object.defineProperty(GoToStepDirective.prototype, \"finalize\", {\n        get: function () {\n            return this.preFinalize;\n        },\n        set: function (emitter) {\n            this.preFinalize = emitter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GoToStepDirective.prototype, \"navigationMode\", {\n        get: function () {\n            return this.wizardState.navigationMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GoToStepDirective.prototype, \"destinationStep\", {\n        get: function () {\n            var destinationStep;\n            if (isStepIndex(this.targetStep)) {\n                destinationStep = this.targetStep.stepIndex;\n            }\n            else if (isStepId(this.targetStep)) {\n                destinationStep = this.wizardState.getIndexOfStepWithId(this.targetStep.stepId);\n            }\n            else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n                destinationStep = this.wizardState.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n            }\n            else if (this.targetStep instanceof WizardStep) {\n                destinationStep = this.wizardState.getIndexOfStep(this.targetStep);\n            }\n            else {\n                throw new Error(\"Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId\");\n            }\n            return destinationStep;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GoToStepDirective.prototype.onClick = function (event) {\n        this.navigationMode.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n    };\n    return GoToStepDirective;\n}());\nvar NextStepDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NextStepDirective(wizardState) {\n        this.wizardState = wizardState;\n        this.preFinalize = new EventEmitter();\n        this.postFinalize = new EventEmitter();\n    }\n    Object.defineProperty(NextStepDirective.prototype, \"finalize\", {\n        get: function () {\n            return this.preFinalize;\n        },\n        set: function (emitter) {\n            this.preFinalize = emitter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NextStepDirective.prototype, \"navigationMode\", {\n        get: function () {\n            return this.wizardState.navigationMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NextStepDirective.prototype.onClick = function (event) {\n        this.navigationMode.goToNextStep(this.preFinalize, this.postFinalize);\n    };\n    return NextStepDirective;\n}());\nvar OptionalStepDirective = /** @class */ /*@__PURE__*/ (function () {\n    function OptionalStepDirective(wizardStep) {\n        this.wizardStep = wizardStep;\n    }\n    OptionalStepDirective.prototype.ngOnInit = function () {\n        this.wizardStep.optional = true;\n    };\n    return OptionalStepDirective;\n}());\nvar PreviousStepDirective = /** @class */ /*@__PURE__*/ (function () {\n    function PreviousStepDirective(wizardState) {\n        this.wizardState = wizardState;\n        this.preFinalize = new EventEmitter();\n        this.postFinalize = new EventEmitter();\n    }\n    Object.defineProperty(PreviousStepDirective.prototype, \"finalize\", {\n        get: function () {\n            return this.preFinalize;\n        },\n        set: function (emitter) {\n            this.preFinalize = emitter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PreviousStepDirective.prototype, \"navigationMode\", {\n        get: function () {\n            return this.wizardState.navigationMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PreviousStepDirective.prototype.onClick = function (event) {\n        this.navigationMode.goToPreviousStep(this.preFinalize, this.postFinalize);\n    };\n    return PreviousStepDirective;\n}());\nvar ResetWizardDirective = /** @class */ /*@__PURE__*/ (function () {\n    function ResetWizardDirective(wizardState) {\n        this.wizardState = wizardState;\n        this.finalize = new EventEmitter();\n    }\n    Object.defineProperty(ResetWizardDirective.prototype, \"navigationMode\", {\n        get: function () {\n            return this.wizardState.navigationMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResetWizardDirective.prototype.onClick = function (event) {\n        this.finalize.emit();\n        this.navigationMode.reset();\n    };\n    return ResetWizardDirective;\n}());\nvar SelectedStepDirective = /** @class */ /*@__PURE__*/ (function () {\n    function SelectedStepDirective(wizardStep) {\n        this.wizardStep = wizardStep;\n    }\n    SelectedStepDirective.prototype.ngOnInit = function () {\n        this.wizardStep.defaultSelected = true;\n    };\n    return SelectedStepDirective;\n}());\nvar WizardCompletionStepDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(WizardCompletionStepDirective, _super);\n    function WizardCompletionStepDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return WizardCompletionStepDirective;\n}(WizardCompletionStep));\nvar WizardStepDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(WizardStepDirective, _super);\n    function WizardStepDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return WizardStepDirective;\n}(WizardStep));\nvar ArchwizardModule = /** @class */ /*@__PURE__*/ (function () {\n    function ArchwizardModule() {\n    }\n    ArchwizardModule.forRoot = function () {\n        return { ngModule: ArchwizardModule, providers: [] };\n    };\n    return ArchwizardModule;\n}());\nexport { ArchwizardModule, WizardComponent, WizardCompletionStepComponent, WizardNavigationBarComponent, WizardStepComponent, EnableBackLinksDirective, GoToStepDirective, NextStepDirective, OptionalStepDirective, PreviousStepDirective, ResetWizardDirective, SelectedStepDirective, WizardCompletionStepDirective, WizardStepDirective, WizardStepTitleDirective, FreeNavigationMode, NavigationMode, SemiStrictNavigationMode, StrictNavigationMode, WizardState, navigationModeFactory, MovingDirection, WizardCompletionStep, WizardStep, isStepId, isStepIndex, isStepOffset, WizardCompletionStepComponent as ɵg, WizardNavigationBarComponent as ɵf, WizardStepComponent as ɵe, WizardComponent as ɵa, EnableBackLinksDirective as ɵm, GoToStepDirective as ɵi, NextStepDirective as ɵj, OptionalStepDirective as ɵl, PreviousStepDirective as ɵk, ResetWizardDirective as ɵq, SelectedStepDirective as ɵp, WizardCompletionStepDirective as ɵo, WizardStepTitleDirective as ɵd, WizardStepDirective as ɵn, WizardState as ɵb, WizardCompletionStep as ɵh, WizardStep as ɵc };\n//# sourceMappingURL=angular-archwizard.js.map\n",null]}