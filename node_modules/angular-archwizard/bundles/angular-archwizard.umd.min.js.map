{
  "version": 3,
  "file": "angular-archwizard.umd.min.js",
  "sources": [
    "ng://angular-archwizard/node_modules/tslib/tslib.es6.js",
    "ng://angular-archwizard/out/directives/wizard-step-title.directive.ts",
    "ng://angular-archwizard/out/util/wizard-step.interface.ts",
    "ng://angular-archwizard/out/navigation/navigation-mode.interface.ts",
    "ng://angular-archwizard/out/navigation/free-navigation-mode.ts",
    "ng://angular-archwizard/out/util/wizard-completion-step.interface.ts",
    "ng://angular-archwizard/out/navigation/semi-strict-navigation-mode.ts",
    "ng://angular-archwizard/out/navigation/strict-navigation-mode.ts",
    "ng://angular-archwizard/out/navigation/navigation-mode.provider.ts",
    "ng://angular-archwizard/out/navigation/wizard-state.model.ts",
    "ng://angular-archwizard/out/components/wizard.component.ts",
    "ng://angular-archwizard/out/components/wizard-completion-step.component.ts",
    "ng://angular-archwizard/out/components/wizard-navigation-bar.component.ts",
    "ng://angular-archwizard/out/components/wizard-step.component.ts",
    "ng://angular-archwizard/out/directives/enable-back-links.directive.ts",
    "ng://angular-archwizard/out/util/step-offset.interface.ts",
    "ng://angular-archwizard/out/util/step-id.interface.ts",
    "ng://angular-archwizard/out/util/step-index.interface.ts",
    "ng://angular-archwizard/out/directives/go-to-step.directive.ts",
    "ng://angular-archwizard/out/directives/next-step.directive.ts",
    "ng://angular-archwizard/out/directives/optional-step.directive.ts",
    "ng://angular-archwizard/out/directives/previous-step.directive.ts",
    "ng://angular-archwizard/out/directives/reset-wizard.directive.ts",
    "ng://angular-archwizard/out/directives/selected-step.directive.ts",
    "ng://angular-archwizard/out/directives/wizard-completion-step.directive.ts",
    "ng://angular-archwizard/out/directives/wizard-step.directive.ts",
    "ng://angular-archwizard/out/archwizard.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "/**\n * Created by marc on 01.06.17.\n */\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n})\nexport class WizardStepTitleDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n   */\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n",
    "import {MovingDirection} from './moving-direction.enum';\nimport {WizardStepTitleDirective} from '../directives/wizard-step-title.directive';\nimport {ContentChild, EventEmitter, HostBinding, Input, Output} from '@angular/core';\nimport {isBoolean} from 'util';\nimport {NavigationSymbol} from './navigation-symbol.interface';\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\nexport abstract class WizardStep {\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is then shown inside the navigation bar.\n   * Compared to `stepTitle` this property can contain any html content and not only plain text\n   */\n  @ContentChild(WizardStepTitleDirective)\n  public stepTitleTemplate: WizardStepTitleDirective;\n\n  /**\n   * A step id, unique to the step\n   */\n  @Input()\n  public stepId: string;\n\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is only shown inside the navigation bar, if `stepTitleTemplate` is not defined or null.\n   */\n  @Input()\n  public stepTitle: string;\n\n  /**\n   * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n   */\n  @Input()\n  public navigationSymbol: NavigationSymbol = { symbol: '' };\n\n  /**\n   * A boolean describing if the wizard step has been completed\n   */\n  public completed = false;\n\n  /**\n   * A boolean describing if the wizard step is currently selected\n   */\n  public selected = false;\n\n  /**\n   * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n   */\n  public defaultSelected = false;\n\n  /**\n   * A boolean describing if the wizard step is an optional step\n   */\n  public optional = false;\n\n  /**\n   * A function or boolean deciding, if this step can be entered\n   */\n  @Input()\n  public canEnter: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * A function or boolean deciding, if this step can be exited\n   */\n  @Input()\n  public canExit: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * This [[EventEmitter]] is called when the step is entered.\n   * The bound method should be used to do initialization work.\n   */\n  @Output()\n  public stepEnter: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * This [[EventEmitter]] is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * Returns if this wizard step should be visible to the user.\n   * If the step should be visible to the user false is returned, otherwise true\n   */\n  @HostBinding('hidden')\n  public get hidden(): boolean {\n    return !this.selected;\n  }\n\n  /**\n   * This method returns true, if this wizard step can be transitioned with a given direction.\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n   *\n   * @param condition A condition variable, deciding if the step can be transitioned\n   * @param direction The direction in which this step should be transitioned\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n   */\n  private static canTransitionStep(condition: ((direction: MovingDirection) => boolean) |\n                                     ((direction: MovingDirection) => Promise<boolean>) |\n                                     boolean,\n                                   direction: MovingDirection): Promise<boolean> {\n    if (isBoolean(condition)) {\n      return Promise.resolve(condition as boolean);\n    } else if (condition instanceof Function) {\n      return Promise.resolve(condition(direction));\n    } else {\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\n    }\n  }\n\n  /**\n   * A function called when the step is entered\n   *\n   * @param direction The direction in which the step is entered\n   */\n  public enter(direction: MovingDirection): void {\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * A function called when the step is exited\n   *\n   * @param direction The direction in which the step is exited\n   */\n  public exit(direction: MovingDirection) {\n    this.stepExit.emit(direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be entered from the given direction.\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be entered\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n   */\n  public canEnterStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canEnter, direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be exited into given direction.\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be left\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n   */\n  public canExitStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canExit, direction);\n  }\n}\n",
    "import {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * An interface describing the basic functionality, which must be provided by a navigation mode.\n * A navigation mode manages the navigation between different wizard steps, this contains the validation, if a step transition can be done\n *\n * @author Marc Arndt\n */\nexport abstract class NavigationMode {\n  constructor(protected wizardState: WizardState) {\n  }\n\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n   */\n  abstract canGoToStep(destinationIndex: number): Promise<boolean>;\n\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   * If this is not possible, the current wizard step should be exited and then reentered with `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination step\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  abstract goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void;\n\n  /**\n   * Checks, whether the wizard step, located at the given index, is can be navigated to\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns True if the step can be navigated to, false otherwise\n   */\n  abstract isNavigable(destinationIndex: number): boolean;\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  abstract reset(): void;\n\n  /**\n   * Tries to transition the wizard to the previous step from the `currentStep`\n   */\n  goToPreviousStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    if (this.wizardState.hasPreviousStep()) {\n      this.goToStep(this.wizardState.currentStepIndex - 1, preFinalize, postFinalize);\n    }\n  }\n\n  /**\n   * Tries to transition the wizard to the next step from the `currentStep`\n   */\n  goToNextStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    if (this.wizardState.hasNextStep()) {\n      this.goToStep(this.wizardState.currentStepIndex + 1, preFinalize, postFinalize);\n    }\n  }\n}\n",
    "import {NavigationMode} from './navigation-mode.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate without any limitations,\n * as long as the current step can be exited in the given direction\n *\n * @author Marc Arndt\n */\nexport class FreeNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  isNavigable(destinationIndex: number): boolean {\n    return true;\n  }\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n",
    "import {WizardStep} from './wizard-step.interface';\nimport {MovingDirection} from './moving-direction.enum';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\nexport abstract class WizardCompletionStep extends WizardStep {\n  /**\n   * @inheritDoc\n   */\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * @inheritDoc\n   */\n  public canExit: ((direction: MovingDirection) => boolean) | boolean = false;\n\n  /**\n   * @inheritDoc\n   */\n  public enter(direction: MovingDirection): void {\n    this.completed = true;\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public exit(direction: MovingDirection): void {\n    // set this completion step as incomplete\n    this.completed = false;\n    this.stepExit.emit(direction);\n  }\n}\n",
    "import {NavigationMode} from './navigation-mode.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate with some limitations.\n * The user can only navigation to a given destination step, if:\n * - the current step can be exited in the direction of the destination step\n * - a completion step can only be entered, if all \"normal\" wizard steps have been completed\n *\n * @author Marc Arndt\n */\nexport class SemiStrictNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - all \"normal\" wizard steps have been completed, are optional or selected, or the destination step isn't a completion step\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    // provide the destination step as a lambda in case the index doesn't exist (i.e. hasStep === false)\n    const destinationStep = (previous: boolean) => {\n      if (previous) {\n        const allNormalStepsCompleted = this.wizardState.wizardSteps\n          .filter((step, index) => index < destinationIndex)\n          .every(step => step.completed || step.optional || step.selected);\n\n        return Promise.resolve(\n          !(this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) || allNormalStepsCompleted);\n      } else {\n        return Promise.resolve(false);\n      }\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep)\n      .then(destinationStep);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isNavigable(destinationIndex: number): boolean {\n    if (this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) {\n      // a completion step can only be entered, if all previous steps have been completed, are optional, or selected\n      return this.wizardState.wizardSteps.filter((step, index) => index < destinationIndex)\n        .every(step => step.completed || step.optional || step.selected);\n    } else {\n      // a \"normal\" step can always be entered\n      return true;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // the default step is a completion step and the wizard contains more than one step\n    const defaultCompletionStep = this.wizardState.getStepAtIndex(this.wizardState.defaultStepIndex) instanceof WizardCompletionStep &&\n      this.wizardState.wizardSteps.length !== 1;\n\n    if (defaultCompletionStep) {\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} references a completion step`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n",
    "import {NavigationMode} from './navigation-mode.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate with strict limitations.\n * The user can only navigation to a given destination step, if:\n * - the current step can be exited in the direction of the destination step\n * - all previous steps to the destination step have been completed or are optional\n *\n * @author Marc Arndt\n */\nexport class StrictNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - all previous steps to the destination step have been completed or are optional\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const allPreviousStepsComplete = (previous: boolean) => {\n      if (previous) {\n        return Promise.resolve(this.wizardState.wizardSteps\n          .filter((step, index) => index < destinationIndex && index !== this.wizardState.currentStepIndex)\n          .every(step => step.completed || step.optional)\n        );\n      } else {\n        return Promise.resolve(false);\n      }\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep)\n      .then(allPreviousStepsComplete);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - all steps between the old current step and the destination step are marked as incomplete\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        // set all steps after the destination step to incomplete\n        this.wizardState.wizardSteps\n          .filter((step, index) => this.wizardState.currentStepIndex > destinationIndex && index > destinationIndex)\n          .forEach(step => step.completed = false);\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  isNavigable(destinationIndex: number): boolean {\n    // a wizard step can be navigated to through the navigation bar, iff it's located before the current wizard step\n    return destinationIndex < this.wizardState.currentStepIndex;\n  }\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // at least one step is before the default step, that is not optional\n    const illegalDefaultStep = this.wizardState.wizardSteps\n      .filter((step, index) => index < this.wizardState.defaultStepIndex)\n      .some(step => !step.optional);\n\n    if (illegalDefaultStep) {\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} is located after a non optional step`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n",
    "import {FreeNavigationMode} from './free-navigation-mode';\nimport {SemiStrictNavigationMode} from './semi-strict-navigation-mode';\nimport {StrictNavigationMode} from './strict-navigation-mode';\n\nimport {NavigationMode} from './navigation-mode.interface';\nimport {WizardState} from './wizard-state.model';\n\n/**\n * A factory method used to create [[NavigationMode]] instances\n *\n * @param navigationMode The name of the to be used navigation mode\n * @param wizardState The wizard state of the wizard\n * @returns The created [[NavigationMode]]\n */\nexport function navigationModeFactory(navigationMode: string, wizardState: WizardState): NavigationMode {\n  switch (navigationMode) {\n    case 'free':\n      return new FreeNavigationMode(wizardState);\n    case 'semi-strict':\n      return new SemiStrictNavigationMode(wizardState);\n    case 'strict':\n    default:\n      return new StrictNavigationMode(wizardState);\n  }\n};\n",
    "import {Injectable} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {NavigationMode} from './navigation-mode.interface';\nimport {navigationModeFactory} from './navigation-mode.provider';\n\n/**\n * The internal model/state of a wizard.\n * This model contains:\n * - an array with all steps the wizard contains\n * - the index of the step the wizard currently resides inside\n * - information about the completeness of the wizard\n * - some additional helper methods\n *\n * @author Marc Arndt\n */\n@Injectable()\nexport class WizardState {\n  /**\n   * The initial step index, as taken from the [[WizardComponent]]\n   */\n  private _defaultStepIndex = 0;\n\n  /**\n   * An array representation of all wizard steps belonging to this model\n   */\n  public wizardSteps: Array<WizardStep> = [];\n\n  /**\n   * Sets the initial default step.\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n   *\n   * @param defaultStepIndex The new default wizard step index\n   */\n  public set defaultStepIndex(defaultStepIndex) {\n    this._defaultStepIndex = defaultStepIndex;\n  }\n\n  /**\n   * The initial step index.\n   * This value can be either:\n   * - the index of a wizard step with a `selected` directive, or\n   * - the default step index, set in the [[WizardComponent]]\n   */\n  public get defaultStepIndex(): number {\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\n\n    if (foundDefaultStep) {\n      return this.getIndexOfStep(foundDefaultStep);\n    } else {\n      return this._defaultStepIndex;\n    }\n  };\n\n  /**\n   * The index of the currently visible and selected step inside the wizardSteps QueryList.\n   * If this wizard contains no steps, currentStepIndex is -1\n   */\n  public currentStepIndex = -1;\n\n  /**\n   * The navigation mode used to navigate inside the wizard\n   */\n  public navigationMode: NavigationMode;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  public disableNavigationBar: boolean;\n\n  /**\n   * The WizardStep object belonging to the currently visible and selected step.\n   * The currentStep is always the currently selected wizard step.\n   * The currentStep can be either completed, if it was visited earlier,\n   * or not completed, if it is visited for the first time or its state is currently out of date.\n   *\n   * If this wizard contains no steps, currentStep is null\n   */\n  public get currentStep(): WizardStep {\n    if (this.hasStep(this.currentStepIndex)) {\n      return this.wizardSteps[this.currentStepIndex];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * The completeness of the wizard.\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n   */\n  public get completed(): boolean {\n    return this.wizardSteps.every(step => step.completed || step.optional);\n  }\n\n  /**\n   * Constructor\n   */\n  constructor() {\n  }\n\n  /**\n   * Updates the navigation mode to the navigation mode with the given name\n   *\n   * @param updatedNavigationMode The name of the new navigation mode\n   */\n  updateNavigationMode(updatedNavigationMode: string): void {\n    this.navigationMode = navigationModeFactory(updatedNavigationMode, this);\n  }\n\n  /**\n   * Updates the wizard steps to the new array\n   *\n   * @param updatedWizardSteps The updated wizard steps\n   */\n  updateWizardSteps(updatedWizardSteps: Array<WizardStep>): void {\n    // the wizard is currently not in the initialization phase\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n      this.currentStepIndex = updatedWizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n    }\n\n    this.wizardSteps = updatedWizardSteps;\n  }\n\n  /**\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n   *\n   * @param stepIndex The to be checked index of a step inside this wizard\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n   */\n  hasStep(stepIndex: number): boolean {\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n  }\n\n  /**\n   * Checks if this wizard has a previous step, compared to the current step\n   *\n   * @returns True if this wizard has a previous step before the current step\n   */\n  hasPreviousStep(): boolean {\n    return this.hasStep(this.currentStepIndex - 1);\n  }\n\n  /**\n   * Checks if this wizard has a next step, compared to the current step\n   *\n   * @returns True if this wizard has a next step after the current step\n   */\n  hasNextStep(): boolean {\n    return this.hasStep(this.currentStepIndex + 1);\n  }\n\n  /**\n   * Checks if this wizard is currently inside its last step\n   *\n   * @returns True if the wizard is currently inside its last step\n   */\n  isLastStep(): boolean {\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n  }\n\n  /**\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\n   * If no [[WizardStep]] exists at the given index an Error is thrown\n   *\n   * @param stepIndex The given index\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n   */\n  getStepAtIndex(stepIndex: number): WizardStep {\n    if (!this.hasStep(stepIndex)) {\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\n    }\n\n    return this.wizardSteps[stepIndex];\n  }\n\n  /**\n   * Finds the index of the step with the given `stepId`.\n   * If no step with the given `stepId` exists, `-1` is returned\n   *\n   * @param stepId The given step id\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n   */\n  getIndexOfStepWithId(stepId: string): number {\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\n  }\n\n  /**\n   * Finds the index of the given [[WizardStep]] `step`.\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n   *\n   * @param step The given [[WizardStep]]\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\n   */\n  getIndexOfStep(step: WizardStep): number {\n    return this.wizardSteps.indexOf(step);\n  }\n\n  /**\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n   *\n   * @param destinationStep The given destination step\n   * @returns The calculated [[MovingDirection]]\n   */\n  getMovingDirection(destinationStep: number): MovingDirection {\n    let movingDirection: MovingDirection;\n\n    if (destinationStep > this.currentStepIndex) {\n      movingDirection = MovingDirection.Forwards;\n    } else if (destinationStep < this.currentStepIndex) {\n      movingDirection = MovingDirection.Backwards;\n    } else {\n      movingDirection = MovingDirection.Stay;\n    }\n\n    return movingDirection;\n  }\n}\n",
    "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  HostBinding,\n  Input,\n  OnChanges,\n  QueryList,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard',\n  template: `<aw-wizard-navigation-bar\n  [direction]=\"navBarDirection\"\n  *ngIf=\"navBarLocation == 'top' || navBarLocation == 'left'\"\n  [ngClass]=\"{\n    vertical: navBarLocation == 'left',\n    horizontal: navBarLocation == 'top',\n    small: navBarLayout == 'small',\n    'large-filled': navBarLayout == 'large-filled',\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\n    'large-empty': navBarLayout == 'large-empty',\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\n  }\">\n</aw-wizard-navigation-bar>\n\n<div [ngClass]=\"{\n  'wizard-steps': true,\n  vertical: navBarLocation == 'left' || navBarLocation == 'right',\n  horizontal: navBarLocation == 'top' || navBarLocation == 'bottom'\n}\">\n  <ng-content></ng-content>\n</div>\n\n<aw-wizard-navigation-bar\n  [direction]=\"navBarDirection\"\n  *ngIf=\"navBarLocation == 'bottom' || navBarLocation == 'right'\"\n  [ngClass]=\"{\n    vertical: navBarLocation == 'right',\n    horizontal: navBarLocation == 'bottom',\n    small: navBarLayout == 'small',\n    'large-filled': navBarLayout == 'large-filled',\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\n    'large-empty': navBarLayout == 'large-empty',\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\n  }\">\n</aw-wizard-navigation-bar>\n`,\n  styles: [`aw-wizard{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}aw-wizard.vertical{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}aw-wizard.horizontal{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps{top:0;display:-webkit-box;display:-ms-flexbox;display:flex}aw-wizard .wizard-steps.vertical{min-width:calc(100% - 280px);width:80%;height:100%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps.horizontal{width:100%;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}`],\n  encapsulation: ViewEncapsulation.None,\n  providers: [WizardState]\n})\nexport class WizardComponent implements OnChanges, AfterContentInit {\n  /**\n   * A QueryList containing all [[WizardStep]]s inside this wizard\n   */\n  @ContentChildren(WizardStep)\n  public wizardSteps: QueryList<WizardStep>;\n\n  /**\n   * The location of the navigation bar inside the wizard.\n   * This location can be either top, bottom, left or right\n   */\n  @Input()\n  public navBarLocation = 'top';\n\n  /**\n   * The layout of the navigation bar inside the wizard.\n   * The layout can be either small, large-filled, large-empty or large-symbols\n   */\n  @Input()\n  public navBarLayout = 'small';\n\n  /**\n   * The direction in which the steps inside the navigation bar should be shown.\n   * The direction can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public navBarDirection = 'left-to-right';\n\n  /**\n   * The navigation mode used for transitioning between different steps.\n   * The navigation mode can be either `strict`, `semi-strict` or `free`\n   */\n  @Input()\n  public navigationMode = 'strict';\n\n  /**\n   * The initially selected step, represented by its index\n   */\n  @Input()\n  public defaultStepIndex = 0;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  @Input()\n  public disableNavigationBar = false;\n\n  /**\n   * Returns true if this wizard uses a horizontal orientation.\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n   *\n   * @returns True if this wizard uses a horizontal orientation\n   */\n  @HostBinding('class.horizontal')\n  public get horizontalOrientation(): boolean {\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n  }\n\n  /**\n   * Returns true if this wizard uses a vertical orientation.\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n   *\n   * @returns True if this wizard uses a vertical orientation\n   */\n  @HostBinding('class.vertical')\n  public get verticalOrientation(): boolean {\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n  }\n\n  /**\n   * The navigation mode for this wizard\n   */\n  public get navigation(): NavigationMode {\n    return this.model.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param model The model for this wizard component\n   */\n  constructor(public model: WizardState) {\n  }\n\n  /**\n   * Updates the model after certain input values have changed\n   *\n   * @param changes The detected changes\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    for (const propName of Object.keys(changes)) {\n      let change = changes[propName];\n\n      if (!change.firstChange) {\n        switch (propName) {\n          case 'defaultStepIndex':\n            this.model.defaultStepIndex = parseInt(change.currentValue, 10);\n            break;\n          case 'disableNavigationBar':\n            this.model.disableNavigationBar = change.currentValue;\n            break;\n          case 'navigationMode':\n            this.model.updateNavigationMode(change.currentValue);\n            break;\n          /* istanbul ignore next */\n          default:\n        }\n      }\n    }\n  }\n\n  /**\n   * Initialization work\n   */\n  ngAfterContentInit(): void {\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n    this.wizardSteps.changes.subscribe(changedWizardSteps => {\n      this.model.updateWizardSteps(changedWizardSteps.toArray());\n    });\n\n    // initialize the model\n    this.model.disableNavigationBar = this.disableNavigationBar;\n    this.model.defaultStepIndex = this.defaultStepIndex;\n    this.model.updateWizardSteps(this.wizardSteps.toArray());\n    this.model.updateNavigationMode(this.navigationMode);\n\n    // finally reset the whole wizard state\n    this.navigation.reset();\n  }\n}\n",
    "/**\n * Created by marc on 20.05.17.\n */\n\nimport {Component, forwardRef, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-completion-step',\n  template: `<ng-content></ng-content>\n`,\n  styles: [`aw-wizard-completion-step{height:auto;width:100%}`],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent)},\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent)}\n  ]\n})\nexport class WizardCompletionStepComponent extends WizardCompletionStep {\n}\n",
    "import {Component, Input, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-navigation-bar',\n  template: `<ul class=\"steps-indicator steps-{{numberOfWizardSteps}}\">\n  <li *ngFor=\"let step of wizardSteps\"\n      [attr.step-symbol]=\"step.navigationSymbol.symbol\"\n      [ngStyle]=\"{\n        'font-family': step.navigationSymbol.fontFamily\n      }\"\n      [ngClass]=\"{\n        default: isDefault(step),\n        current: isCurrent(step),\n        done: isDone(step),\n        editing: isEditing(step),\n        optional: isOptional(step),\n        navigable: isNavigable(step)\n  }\">\n    <div>\n      <a [awGoToStep]=\"step\">\n        <ng-container *ngIf=\"step.stepTitleTemplate\" [ngTemplateOutlet]=\"step.stepTitleTemplate.templateRef\"></ng-container>\n        <ng-container *ngIf=\"!step.stepTitleTemplate\">{{step.stepTitle}}</ng-container>\n      </a>\n    </div>\n  </li>\n</ul>\n`,\n  styles: [`aw-wizard-navigation-bar.horizontal.small ul.steps-indicator{padding:24px 0 10px}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 14px);top:-7px;left:calc(50% + 7px)}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:after{position:absolute;top:-14px;left:calc(50% - 7px);width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.horizontal ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;right:0;bottom:0;left:0;margin:0;width:100%;list-style:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2:before{left:25%;right:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2 li{width:50%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3:before{left:16.66666667%;right:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3 li{width:33.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4:before{left:12.5%;right:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4 li{width:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5:before{left:10%;right:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5 li{width:20%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6:before{left:8.33333333%;right:8.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6 li{width:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7:before{left:7.14285714%;right:7.14285714%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7 li{width:14.28571429%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8:before{left:6.25%;right:6.25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8 li{width:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9:before{left:5.55555556%;right:5.55555556%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9 li{width:11.11111111%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10:before{left:5%;right:5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10 li{width:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.horizontal ul.steps-indicator li{position:relative;margin:0;padding:10px 0 0;pointer-events:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a{color:grey;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:center;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.horizontal ul.steps-indicator li.navigable{pointer-events:auto}`, `aw-wizard-navigation-bar.vertical{max-width:280px;width:20%;height:100%;position:-webkit-sticky;position:sticky;top:0}aw-wizard-navigation-bar.vertical.small ul.steps-indicator{padding:5px 5px 5px 19px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-7px;top:14px;height:calc(100% - 14px);width:1px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:after{position:absolute;top:0;left:-14px;width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li div{min-height:14px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.vertical ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;list-style:none;margin:auto}aw-wizard-navigation-bar.vertical ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.vertical ul.steps-indicator li{position:relative;pointer-events:none}aw-wizard-navigation-bar.vertical ul.steps-indicator li:not(:last-child){margin-bottom:0;padding-bottom:10px}aw-wizard-navigation-bar.vertical ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a{color:grey;margin-left:15px;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:left;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.vertical ul.steps-indicator li.navigable{pointer-events:auto}`],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class WizardNavigationBarComponent {\n  /**\n   * The direction in which the wizard steps should be shown in the navigation bar.\n   * This value can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public direction = 'left-to-right';\n\n  /**\n   * The navigation mode\n   */\n  public get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state the wizard currently resides in\n   */\n  constructor(public wizardState: WizardState) {\n  }\n\n  /**\n   * Returns all [[WizardStep]]s contained in the wizard\n   *\n   * @returns An array containing all [[WizardStep]]s\n   */\n  get wizardSteps(): Array<WizardStep> {\n    switch (this.direction) {\n      case 'right-to-left':\n        return this.wizardState.wizardSteps.slice().reverse();\n      case 'left-to-right':\n      default:\n        return this.wizardState.wizardSteps;\n    }\n  }\n\n  /**\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\n   *\n   * @returns The number of wizard steps to be displayed\n   */\n  get numberOfWizardSteps(): number {\n    return this.wizardState.wizardSteps.length;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as current\n   */\n  public isCurrent(wizardStep: WizardStep): boolean {\n    return wizardStep.selected && !wizardStep.completed && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as done\n   */\n  public isDone(wizardStep: WizardStep): boolean {\n    return (wizardStep.completed && !wizardStep.selected) || this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `default` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as default\n   */\n  public isDefault(wizardStep: WizardStep): boolean {\n    return !wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as editing\n   */\n  public isEditing(wizardStep: WizardStep): boolean {\n    return wizardStep.selected && wizardStep.completed && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as optional\n   */\n  public isOptional(wizardStep: WizardStep): boolean {\n    return wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n   * A wizard step can be navigated to if:\n   * - the step is currently not selected\n   * - the navigation bar isn't disabled\n   * - the navigation mode allows navigation to the step\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as navigable\n   */\n  public isNavigable(wizardStep: WizardStep): boolean {\n    return !wizardStep.selected && !this.wizardState.disableNavigationBar &&\n      this.navigationMode.isNavigable(this.wizardState.getIndexOfStep(wizardStep));\n  }\n}\n",
    "import {Component, forwardRef, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` input:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <aw-wizard-step [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` input:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <aw-wizard-step [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-step',\n  template: `<ng-content></ng-content>\n`,\n  styles: [`aw-wizard-step{height:auto;width:100%}`],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent)}\n  ]\n})\nexport class WizardStepComponent extends WizardStep {\n}\n",
    "import {Directive, EventEmitter, Host, OnInit, Output} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awEnableBackLinks]'\n})\nexport class EnableBackLinksDirective implements OnInit {\n  /**\n   * This EventEmitter is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * Constructor\n   *\n   * @param completionStep The wizard completion step, which should be exitable\n   */\n  constructor(@Host() private completionStep: WizardCompletionStep) { }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.completionStep.canExit = true;\n    this.completionStep.stepExit = this.stepExit;\n  }\n}\n",
    "/**\n * An offset between two steps.\n * This offset can be either positive or negative.\n * A positive offset means, that the offset step is after the other step, while a negative offset means,\n * that the offset step is ahead of the other step.\n *\n * @author Marc Arndt\n */\nexport interface StepOffset {\n  /**\n   * The offset to the destination step\n   */\n  stepOffset: number\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\nexport function isStepOffset(value: any): value is StepOffset {\n  return value.hasOwnProperty('stepOffset');\n}\n",
    "import {WizardStep} from './wizard-step.interface';\n\n/**\n * An unique identifier of a wizard step\n *\n * @author Marc Arndt\n */\nexport interface StepId {\n  /**\n   * The id of the destination step\n   */\n  stepId: string\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\nexport function isStepId(value: any): value is StepId {\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n",
    "/**\n * An index of a wizard step.\n * This index is the index of the step inside the wizard.\n * The index is always zero based, i.e. the step with index 0 is the first step of the wizard\n *\n * @author Marc Arndt\n */\nexport interface StepIndex {\n  /**\n   * The index of the destination step\n   */\n  stepIndex: number\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\nexport function isStepIndex(value: any): value is StepIndex {\n  return value.hasOwnProperty('stepIndex');\n}\n",
    "/**\n * Created by marc on 09.01.17.\n */\n\nimport {Directive, EventEmitter, HostListener, Input, Optional, Output} from '@angular/core';\nimport {isStepOffset, StepOffset} from '../util/step-offset.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {isStepId, StepId} from '../util/step-id.interface';\nimport {isStepIndex, StepIndex} from '../util/step-index.interface';\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awGoToStep]'\n})\nexport class GoToStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * The destination step, to which the wizard should navigate, after the component, having this directive has been activated.\n   * This destination step can be given either as a [[WizardStep]] containing the step directly,\n   * a [[StepOffset]] between the current step and the `wizardStep`, in which this directive has been used,\n   * or a step index as a number or string\n   */\n    // tslint:disable-next-line:no-input-rename\n  @Input('awGoToStep')\n  public targetStep: WizardStep | StepOffset | StepIndex | StepId;\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The wizard state\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n   */\n  constructor(private wizardState: WizardState, @Optional() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Returns the destination step of this directive as an absolute step index inside the wizard\n   *\n   * @returns The index of the destination step\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\n   */\n  get destinationStep(): number {\n    let destinationStep: number;\n\n    if (isStepIndex(this.targetStep)) {\n      destinationStep = this.targetStep.stepIndex;\n    } else if (isStepId(this.targetStep)) {\n      destinationStep = this.wizardState.getIndexOfStepWithId(this.targetStep.stepId);\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n      destinationStep = this.wizardState.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n    } else if (this.targetStep instanceof WizardStep) {\n      destinationStep = this.wizardState.getIndexOfStep(this.targetStep);\n    } else {\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\n    }\n\n    return destinationStep;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the `destinationStep`\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: Event): void {\n    this.navigationMode.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n  }\n}\n",
    "import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awNextStep]'\n})\nexport class NextStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard\n   */\n  constructor(private wizardState: WizardState) { }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the next step\n   */\n  @HostListener('click', ['$event']) onClick(event: Event): void {\n    this.navigationMode.goToNextStep(this.preFinalize, this.postFinalize);\n  }\n}\n",
    "import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awOptionalStep]'\n})\nexport class OptionalStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n   */\n  constructor(@Host() private wizardStep: WizardStep) { }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.wizardStep.optional = true;\n  }\n}\n",
    "import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awPreviousStep]'\n})\nexport class PreviousStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * A convenience field for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard\n   */\n  constructor(private wizardState: WizardState) { }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the previous step\n   */\n  @HostListener('click', ['$event']) onClick(event: Event): void {\n    this.navigationMode.goToPreviousStep(this.preFinalize, this.postFinalize);\n  }\n}\n",
    "import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awResetWizard]'\n})\nexport class ResetWizardDirective {\n  /**\n   * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n   */\n  @Output()\n  public finalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The wizard state\n   */\n  constructor(private wizardState: WizardState) { }\n\n  /**\n   * Resets the wizard\n   */\n  @HostListener('click', ['$event']) onClick(event: Event): void {\n    // do some optional cleanup work\n    this.finalize.emit();\n    // reset the wizard to its initial state\n    this.navigationMode.reset();\n  }\n}\n",
    "import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awSelectedStep]'\n})\nexport class SelectedStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which should be selected by default\n   */\n  constructor(@Host() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.wizardStep.defaultSelected = true;\n  }\n}\n",
    "import {Directive, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardCompletionStep]',\n  providers: [\n    { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective) },\n    { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective) }\n  ]\n})\nexport class WizardCompletionStepDirective extends WizardCompletionStep {\n}\n",
    "import {Directive, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` input:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <div awWizardStep [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` input:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <div awWizardStep [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardStep]',\n  providers: [\n    { provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective) }\n  ]\n})\nexport class WizardStepDirective extends WizardStep {\n}\n",
    "import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {WizardComponent} from './components/wizard.component';\nimport {WizardNavigationBarComponent} from './components/wizard-navigation-bar.component';\nimport {WizardStepComponent} from './components/wizard-step.component';\nimport {WizardCompletionStepComponent} from './components/wizard-completion-step.component';\n\nimport {NextStepDirective} from './directives/next-step.directive';\nimport {PreviousStepDirective} from './directives/previous-step.directive';\nimport {OptionalStepDirective} from './directives/optional-step.directive';\nimport {GoToStepDirective} from './directives/go-to-step.directive';\nimport {WizardStepTitleDirective} from './directives/wizard-step-title.directive';\nimport {EnableBackLinksDirective} from './directives/enable-back-links.directive';\nimport {WizardStepDirective} from './directives/wizard-step.directive';\nimport {WizardCompletionStepDirective} from './directives/wizard-completion-step.directive';\nimport {SelectedStepDirective} from './directives/selected-step.directive';\nimport {ResetWizardDirective} from './directives/reset-wizard.directive';\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\n@NgModule({\n  declarations: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective\n  ]\n})\nexport class ArchwizardModule {\n  /* istanbul ignore next */\n  static forRoot(): ModuleWithProviders {\n    return {ngModule: ArchwizardModule, providers: []};\n  }\n}\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "__read",
    "o",
    "n",
    "m",
    "Symbol",
    "iterator",
    "r",
    "e",
    "i",
    "call",
    "ar",
    "next",
    "done",
    "push",
    "value",
    "error",
    "WizardStepTitleDirective",
    "templateRef",
    "type",
    "Directive",
    "args",
    "selector",
    "TemplateRef",
    "WizardStep",
    "navigationSymbol",
    "symbol",
    "completed",
    "selected",
    "defaultSelected",
    "optional",
    "canEnter",
    "canExit",
    "stepEnter",
    "EventEmitter",
    "stepExit",
    "defineProperty",
    "get",
    "canTransitionStep",
    "condition",
    "direction",
    "isBoolean",
    "Promise",
    "resolve",
    "Function",
    "reject",
    "Error",
    "enter",
    "emit",
    "exit",
    "canEnterStep",
    "canExitStep",
    "stepTitleTemplate",
    "ContentChild",
    "stepId",
    "Input",
    "stepTitle",
    "Output",
    "hidden",
    "HostBinding",
    "NavigationMode",
    "wizardState",
    "goToPreviousStep",
    "preFinalize",
    "postFinalize",
    "hasPreviousStep",
    "goToStep",
    "currentStepIndex",
    "goToNextStep",
    "hasNextStep",
    "FreeNavigationMode",
    "_super",
    "tslib_1.__extends",
    "canGoToStep",
    "destinationIndex",
    "_this",
    "hasStep",
    "movingDirection",
    "getMovingDirection",
    "then",
    "previous",
    "currentStep",
    "getStepAtIndex",
    "navigationAllowed",
    "MovingDirection",
    "Stay",
    "isNavigable",
    "reset",
    "defaultStepIndex",
    "wizardSteps",
    "forEach",
    "step",
    "Forwards",
    "WizardCompletionStep",
    "arguments",
    "length",
    "concat",
    "SemiStrictNavigationMode",
    "allNormalStepsCompleted",
    "filter",
    "index",
    "every",
    "StrictNavigationMode",
    "some",
    "navigationModeFactory",
    "navigationMode",
    "WizardState",
    "_defaultStepIndex",
    "foundDefaultStep",
    "find",
    "getIndexOfStep",
    "set",
    "updateNavigationMode",
    "updatedNavigationMode",
    "updateWizardSteps",
    "updatedWizardSteps",
    "indexOf",
    "stepIndex",
    "isLastStep",
    "getIndexOfStepWithId",
    "findIndex",
    "destinationStep",
    "Backwards",
    "Injectable",
    "WizardComponent",
    "model",
    "navBarLocation",
    "navBarLayout",
    "navBarDirection",
    "disableNavigationBar",
    "ngOnChanges",
    "changes",
    "_a",
    "tslib_1.__values",
    "keys",
    "_b",
    "propName",
    "change",
    "firstChange",
    "parseInt",
    "currentValue",
    "ngAfterContentInit",
    "subscribe",
    "changedWizardSteps",
    "toArray",
    "navigation",
    "Component",
    "template",
    "styles",
    "encapsulation",
    "ViewEncapsulation",
    "None",
    "providers",
    "ContentChildren",
    "horizontalOrientation",
    "verticalOrientation",
    "WizardCompletionStepComponent",
    "provide",
    "useExisting",
    "forwardRef",
    "WizardNavigationBarComponent",
    "slice",
    "reverse",
    "isCurrent",
    "wizardStep",
    "isDone",
    "isDefault",
    "isEditing",
    "isOptional",
    "WizardStepComponent",
    "EnableBackLinksDirective",
    "completionStep",
    "ngOnInit",
    "isStepOffset",
    "isStepId",
    "isStepIndex",
    "decorators",
    "Host",
    "GoToStepDirective",
    "emitter",
    "targetStep",
    "stepOffset",
    "onClick",
    "event",
    "Optional",
    "finalize",
    "HostListener",
    "NextStepDirective",
    "OptionalStepDirective",
    "PreviousStepDirective",
    "ResetWizardDirective",
    "SelectedStepDirective",
    "WizardCompletionStepDirective",
    "WizardStepDirective",
    "ArchwizardModule",
    "forRoot",
    "ngModule",
    "NgModule",
    "declarations",
    "imports",
    "CommonModule",
    "exports"
  ],
  "mappings": "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"
}
