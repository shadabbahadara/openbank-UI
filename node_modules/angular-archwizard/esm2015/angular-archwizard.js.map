{
  "version": 3,
  "file": "angular-archwizard.js",
  "sources": [
    "ng://angular-archwizard/out/archwizard.module.ts",
    "ng://angular-archwizard/out/directives/wizard-step.directive.ts",
    "ng://angular-archwizard/out/directives/wizard-completion-step.directive.ts",
    "ng://angular-archwizard/out/directives/selected-step.directive.ts",
    "ng://angular-archwizard/out/directives/reset-wizard.directive.ts",
    "ng://angular-archwizard/out/directives/previous-step.directive.ts",
    "ng://angular-archwizard/out/directives/optional-step.directive.ts",
    "ng://angular-archwizard/out/directives/next-step.directive.ts",
    "ng://angular-archwizard/out/directives/go-to-step.directive.ts",
    "ng://angular-archwizard/out/util/step-index.interface.ts",
    "ng://angular-archwizard/out/util/step-id.interface.ts",
    "ng://angular-archwizard/out/util/step-offset.interface.ts",
    "ng://angular-archwizard/out/directives/enable-back-links.directive.ts",
    "ng://angular-archwizard/out/components/wizard-step.component.ts",
    "ng://angular-archwizard/out/components/wizard-navigation-bar.component.ts",
    "ng://angular-archwizard/out/components/wizard-completion-step.component.ts",
    "ng://angular-archwizard/out/components/wizard.component.ts",
    "ng://angular-archwizard/out/navigation/wizard-state.model.ts",
    "ng://angular-archwizard/out/navigation/navigation-mode.provider.ts",
    "ng://angular-archwizard/out/navigation/strict-navigation-mode.ts",
    "ng://angular-archwizard/out/navigation/semi-strict-navigation-mode.ts",
    "ng://angular-archwizard/out/util/wizard-completion-step.interface.ts",
    "ng://angular-archwizard/out/navigation/free-navigation-mode.ts",
    "ng://angular-archwizard/out/navigation/navigation-mode.interface.ts",
    "ng://angular-archwizard/out/util/wizard-step.interface.ts",
    "ng://angular-archwizard/out/directives/wizard-step-title.directive.ts"
  ],
  "sourcesContent": [
    "import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {WizardComponent} from './components/wizard.component';\nimport {WizardNavigationBarComponent} from './components/wizard-navigation-bar.component';\nimport {WizardStepComponent} from './components/wizard-step.component';\nimport {WizardCompletionStepComponent} from './components/wizard-completion-step.component';\n\nimport {NextStepDirective} from './directives/next-step.directive';\nimport {PreviousStepDirective} from './directives/previous-step.directive';\nimport {OptionalStepDirective} from './directives/optional-step.directive';\nimport {GoToStepDirective} from './directives/go-to-step.directive';\nimport {WizardStepTitleDirective} from './directives/wizard-step-title.directive';\nimport {EnableBackLinksDirective} from './directives/enable-back-links.directive';\nimport {WizardStepDirective} from './directives/wizard-step.directive';\nimport {WizardCompletionStepDirective} from './directives/wizard-completion-step.directive';\nimport {SelectedStepDirective} from './directives/selected-step.directive';\nimport {ResetWizardDirective} from './directives/reset-wizard.directive';\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\n@NgModule({\n  declarations: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective\n  ]\n})\nexport class ArchwizardModule {\n  /* istanbul ignore next */\n  static forRoot(): ModuleWithProviders {\n    return {ngModule: ArchwizardModule, providers: []};\n  }\n}\n",
    "import {Directive, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` input:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <div awWizardStep [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` input:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <div awWizardStep [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardStep]',\n  providers: [\n    { provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective) }\n  ]\n})\nexport class WizardStepDirective extends WizardStep {\n}\n",
    "import {Directive, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardCompletionStep]',\n  providers: [\n    { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective) },\n    { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective) }\n  ]\n})\nexport class WizardCompletionStepDirective extends WizardCompletionStep {\n}\n",
    "import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awSelectedStep]'\n})\nexport class SelectedStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which should be selected by default\n   */\n  constructor(@Host() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.wizardStep.defaultSelected = true;\n  }\n}\n",
    "import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awResetWizard]'\n})\nexport class ResetWizardDirective {\n  /**\n   * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n   */\n  @Output()\n  public finalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The wizard state\n   */\n  constructor(private wizardState: WizardState) { }\n\n  /**\n   * Resets the wizard\n   */\n  @HostListener('click', ['$event']) onClick(event: Event): void {\n    // do some optional cleanup work\n    this.finalize.emit();\n    // reset the wizard to its initial state\n    this.navigationMode.reset();\n  }\n}\n",
    "import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awPreviousStep]'\n})\nexport class PreviousStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * A convenience field for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard\n   */\n  constructor(private wizardState: WizardState) { }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the previous step\n   */\n  @HostListener('click', ['$event']) onClick(event: Event): void {\n    this.navigationMode.goToPreviousStep(this.preFinalize, this.postFinalize);\n  }\n}\n",
    "import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awOptionalStep]'\n})\nexport class OptionalStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n   */\n  constructor(@Host() private wizardStep: WizardStep) { }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.wizardStep.optional = true;\n  }\n}\n",
    "import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awNextStep]'\n})\nexport class NextStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard\n   */\n  constructor(private wizardState: WizardState) { }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the next step\n   */\n  @HostListener('click', ['$event']) onClick(event: Event): void {\n    this.navigationMode.goToNextStep(this.preFinalize, this.postFinalize);\n  }\n}\n",
    "/**\n * Created by marc on 09.01.17.\n */\n\nimport {Directive, EventEmitter, HostListener, Input, Optional, Output} from '@angular/core';\nimport {isStepOffset, StepOffset} from '../util/step-offset.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {isStepId, StepId} from '../util/step-id.interface';\nimport {isStepIndex, StepIndex} from '../util/step-index.interface';\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awGoToStep]'\n})\nexport class GoToStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * The destination step, to which the wizard should navigate, after the component, having this directive has been activated.\n   * This destination step can be given either as a [[WizardStep]] containing the step directly,\n   * a [[StepOffset]] between the current step and the `wizardStep`, in which this directive has been used,\n   * or a step index as a number or string\n   */\n    // tslint:disable-next-line:no-input-rename\n  @Input('awGoToStep')\n  public targetStep: WizardStep | StepOffset | StepIndex | StepId;\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The wizard state\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n   */\n  constructor(private wizardState: WizardState, @Optional() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Returns the destination step of this directive as an absolute step index inside the wizard\n   *\n   * @returns The index of the destination step\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\n   */\n  get destinationStep(): number {\n    let destinationStep: number;\n\n    if (isStepIndex(this.targetStep)) {\n      destinationStep = this.targetStep.stepIndex;\n    } else if (isStepId(this.targetStep)) {\n      destinationStep = this.wizardState.getIndexOfStepWithId(this.targetStep.stepId);\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n      destinationStep = this.wizardState.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n    } else if (this.targetStep instanceof WizardStep) {\n      destinationStep = this.wizardState.getIndexOfStep(this.targetStep);\n    } else {\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\n    }\n\n    return destinationStep;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the `destinationStep`\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: Event): void {\n    this.navigationMode.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n  }\n}\n",
    "/**\n * An index of a wizard step.\n * This index is the index of the step inside the wizard.\n * The index is always zero based, i.e. the step with index 0 is the first step of the wizard\n *\n * @author Marc Arndt\n */\nexport interface StepIndex {\n  /**\n   * The index of the destination step\n   */\n  stepIndex: number\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\nexport function isStepIndex(value: any): value is StepIndex {\n  return value.hasOwnProperty('stepIndex');\n}\n",
    "import {WizardStep} from './wizard-step.interface';\n\n/**\n * An unique identifier of a wizard step\n *\n * @author Marc Arndt\n */\nexport interface StepId {\n  /**\n   * The id of the destination step\n   */\n  stepId: string\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\nexport function isStepId(value: any): value is StepId {\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n",
    "/**\n * An offset between two steps.\n * This offset can be either positive or negative.\n * A positive offset means, that the offset step is after the other step, while a negative offset means,\n * that the offset step is ahead of the other step.\n *\n * @author Marc Arndt\n */\nexport interface StepOffset {\n  /**\n   * The offset to the destination step\n   */\n  stepOffset: number\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\nexport function isStepOffset(value: any): value is StepOffset {\n  return value.hasOwnProperty('stepOffset');\n}\n",
    "import {Directive, EventEmitter, Host, OnInit, Output} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awEnableBackLinks]'\n})\nexport class EnableBackLinksDirective implements OnInit {\n  /**\n   * This EventEmitter is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * Constructor\n   *\n   * @param completionStep The wizard completion step, which should be exitable\n   */\n  constructor(@Host() private completionStep: WizardCompletionStep) { }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.completionStep.canExit = true;\n    this.completionStep.stepExit = this.stepExit;\n  }\n}\n",
    "import {Component, forwardRef, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` input:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <aw-wizard-step [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` input:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` directive:\n *\n * ```html\n * <aw-wizard-step [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-step',\n  template: `<ng-content></ng-content>\n`,\n  styles: [`aw-wizard-step{height:auto;width:100%}`],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent)}\n  ]\n})\nexport class WizardStepComponent extends WizardStep {\n}\n",
    "import {Component, Input, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-navigation-bar',\n  template: `<ul class=\"steps-indicator steps-{{numberOfWizardSteps}}\">\n  <li *ngFor=\"let step of wizardSteps\"\n      [attr.step-symbol]=\"step.navigationSymbol.symbol\"\n      [ngStyle]=\"{\n        'font-family': step.navigationSymbol.fontFamily\n      }\"\n      [ngClass]=\"{\n        default: isDefault(step),\n        current: isCurrent(step),\n        done: isDone(step),\n        editing: isEditing(step),\n        optional: isOptional(step),\n        navigable: isNavigable(step)\n  }\">\n    <div>\n      <a [awGoToStep]=\"step\">\n        <ng-container *ngIf=\"step.stepTitleTemplate\" [ngTemplateOutlet]=\"step.stepTitleTemplate.templateRef\"></ng-container>\n        <ng-container *ngIf=\"!step.stepTitleTemplate\">{{step.stepTitle}}</ng-container>\n      </a>\n    </div>\n  </li>\n</ul>\n`,\n  styles: [`aw-wizard-navigation-bar.horizontal.small ul.steps-indicator{padding:24px 0 10px}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 14px);top:-7px;left:calc(50% + 7px)}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:after{position:absolute;top:-14px;left:calc(50% - 7px);width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.horizontal ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;right:0;bottom:0;left:0;margin:0;width:100%;list-style:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2:before{left:25%;right:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2 li{width:50%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3:before{left:16.66666667%;right:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3 li{width:33.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4:before{left:12.5%;right:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4 li{width:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5:before{left:10%;right:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5 li{width:20%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6:before{left:8.33333333%;right:8.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6 li{width:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7:before{left:7.14285714%;right:7.14285714%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7 li{width:14.28571429%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8:before{left:6.25%;right:6.25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8 li{width:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9:before{left:5.55555556%;right:5.55555556%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9 li{width:11.11111111%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10:before{left:5%;right:5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10 li{width:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.horizontal ul.steps-indicator li{position:relative;margin:0;padding:10px 0 0;pointer-events:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a{color:grey;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:center;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.horizontal ul.steps-indicator li.navigable{pointer-events:auto}`, `aw-wizard-navigation-bar.vertical{max-width:280px;width:20%;height:100%;position:-webkit-sticky;position:sticky;top:0}aw-wizard-navigation-bar.vertical.small ul.steps-indicator{padding:5px 5px 5px 19px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-7px;top:14px;height:calc(100% - 14px);width:1px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:after{position:absolute;top:0;left:-14px;width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li div{min-height:14px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.vertical ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;list-style:none;margin:auto}aw-wizard-navigation-bar.vertical ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.vertical ul.steps-indicator li{position:relative;pointer-events:none}aw-wizard-navigation-bar.vertical ul.steps-indicator li:not(:last-child){margin-bottom:0;padding-bottom:10px}aw-wizard-navigation-bar.vertical ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a{color:grey;margin-left:15px;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:left;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.vertical ul.steps-indicator li.navigable{pointer-events:auto}`],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class WizardNavigationBarComponent {\n  /**\n   * The direction in which the wizard steps should be shown in the navigation bar.\n   * This value can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public direction = 'left-to-right';\n\n  /**\n   * The navigation mode\n   */\n  public get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state the wizard currently resides in\n   */\n  constructor(public wizardState: WizardState) {\n  }\n\n  /**\n   * Returns all [[WizardStep]]s contained in the wizard\n   *\n   * @returns An array containing all [[WizardStep]]s\n   */\n  get wizardSteps(): Array<WizardStep> {\n    switch (this.direction) {\n      case 'right-to-left':\n        return this.wizardState.wizardSteps.slice().reverse();\n      case 'left-to-right':\n      default:\n        return this.wizardState.wizardSteps;\n    }\n  }\n\n  /**\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\n   *\n   * @returns The number of wizard steps to be displayed\n   */\n  get numberOfWizardSteps(): number {\n    return this.wizardState.wizardSteps.length;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as current\n   */\n  public isCurrent(wizardStep: WizardStep): boolean {\n    return wizardStep.selected && !wizardStep.completed && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as done\n   */\n  public isDone(wizardStep: WizardStep): boolean {\n    return (wizardStep.completed && !wizardStep.selected) || this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `default` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as default\n   */\n  public isDefault(wizardStep: WizardStep): boolean {\n    return !wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as editing\n   */\n  public isEditing(wizardStep: WizardStep): boolean {\n    return wizardStep.selected && wizardStep.completed && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as optional\n   */\n  public isOptional(wizardStep: WizardStep): boolean {\n    return wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n   * A wizard step can be navigated to if:\n   * - the step is currently not selected\n   * - the navigation bar isn't disabled\n   * - the navigation mode allows navigation to the step\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as navigable\n   */\n  public isNavigable(wizardStep: WizardStep): boolean {\n    return !wizardStep.selected && !this.wizardState.disableNavigationBar &&\n      this.navigationMode.isNavigable(this.wizardState.getIndexOfStep(wizardStep));\n  }\n}\n",
    "/**\n * Created by marc on 20.05.17.\n */\n\nimport {Component, forwardRef, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-completion-step',\n  template: `<ng-content></ng-content>\n`,\n  styles: [`aw-wizard-completion-step{height:auto;width:100%}`],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent)},\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent)}\n  ]\n})\nexport class WizardCompletionStepComponent extends WizardCompletionStep {\n}\n",
    "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  HostBinding,\n  Input,\n  OnChanges,\n  QueryList,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard',\n  template: `<aw-wizard-navigation-bar\n  [direction]=\"navBarDirection\"\n  *ngIf=\"navBarLocation == 'top' || navBarLocation == 'left'\"\n  [ngClass]=\"{\n    vertical: navBarLocation == 'left',\n    horizontal: navBarLocation == 'top',\n    small: navBarLayout == 'small',\n    'large-filled': navBarLayout == 'large-filled',\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\n    'large-empty': navBarLayout == 'large-empty',\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\n  }\">\n</aw-wizard-navigation-bar>\n\n<div [ngClass]=\"{\n  'wizard-steps': true,\n  vertical: navBarLocation == 'left' || navBarLocation == 'right',\n  horizontal: navBarLocation == 'top' || navBarLocation == 'bottom'\n}\">\n  <ng-content></ng-content>\n</div>\n\n<aw-wizard-navigation-bar\n  [direction]=\"navBarDirection\"\n  *ngIf=\"navBarLocation == 'bottom' || navBarLocation == 'right'\"\n  [ngClass]=\"{\n    vertical: navBarLocation == 'right',\n    horizontal: navBarLocation == 'bottom',\n    small: navBarLayout == 'small',\n    'large-filled': navBarLayout == 'large-filled',\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\n    'large-empty': navBarLayout == 'large-empty',\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\n  }\">\n</aw-wizard-navigation-bar>\n`,\n  styles: [`aw-wizard{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}aw-wizard.vertical{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}aw-wizard.horizontal{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps{top:0;display:-webkit-box;display:-ms-flexbox;display:flex}aw-wizard .wizard-steps.vertical{min-width:calc(100% - 280px);width:80%;height:100%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps.horizontal{width:100%;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}`],\n  encapsulation: ViewEncapsulation.None,\n  providers: [WizardState]\n})\nexport class WizardComponent implements OnChanges, AfterContentInit {\n  /**\n   * A QueryList containing all [[WizardStep]]s inside this wizard\n   */\n  @ContentChildren(WizardStep)\n  public wizardSteps: QueryList<WizardStep>;\n\n  /**\n   * The location of the navigation bar inside the wizard.\n   * This location can be either top, bottom, left or right\n   */\n  @Input()\n  public navBarLocation = 'top';\n\n  /**\n   * The layout of the navigation bar inside the wizard.\n   * The layout can be either small, large-filled, large-empty or large-symbols\n   */\n  @Input()\n  public navBarLayout = 'small';\n\n  /**\n   * The direction in which the steps inside the navigation bar should be shown.\n   * The direction can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public navBarDirection = 'left-to-right';\n\n  /**\n   * The navigation mode used for transitioning between different steps.\n   * The navigation mode can be either `strict`, `semi-strict` or `free`\n   */\n  @Input()\n  public navigationMode = 'strict';\n\n  /**\n   * The initially selected step, represented by its index\n   */\n  @Input()\n  public defaultStepIndex = 0;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  @Input()\n  public disableNavigationBar = false;\n\n  /**\n   * Returns true if this wizard uses a horizontal orientation.\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n   *\n   * @returns True if this wizard uses a horizontal orientation\n   */\n  @HostBinding('class.horizontal')\n  public get horizontalOrientation(): boolean {\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n  }\n\n  /**\n   * Returns true if this wizard uses a vertical orientation.\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n   *\n   * @returns True if this wizard uses a vertical orientation\n   */\n  @HostBinding('class.vertical')\n  public get verticalOrientation(): boolean {\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n  }\n\n  /**\n   * The navigation mode for this wizard\n   */\n  public get navigation(): NavigationMode {\n    return this.model.navigationMode;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param model The model for this wizard component\n   */\n  constructor(public model: WizardState) {\n  }\n\n  /**\n   * Updates the model after certain input values have changed\n   *\n   * @param changes The detected changes\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    for (const propName of Object.keys(changes)) {\n      let change = changes[propName];\n\n      if (!change.firstChange) {\n        switch (propName) {\n          case 'defaultStepIndex':\n            this.model.defaultStepIndex = parseInt(change.currentValue, 10);\n            break;\n          case 'disableNavigationBar':\n            this.model.disableNavigationBar = change.currentValue;\n            break;\n          case 'navigationMode':\n            this.model.updateNavigationMode(change.currentValue);\n            break;\n          /* istanbul ignore next */\n          default:\n        }\n      }\n    }\n  }\n\n  /**\n   * Initialization work\n   */\n  ngAfterContentInit(): void {\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n    this.wizardSteps.changes.subscribe(changedWizardSteps => {\n      this.model.updateWizardSteps(changedWizardSteps.toArray());\n    });\n\n    // initialize the model\n    this.model.disableNavigationBar = this.disableNavigationBar;\n    this.model.defaultStepIndex = this.defaultStepIndex;\n    this.model.updateWizardSteps(this.wizardSteps.toArray());\n    this.model.updateNavigationMode(this.navigationMode);\n\n    // finally reset the whole wizard state\n    this.navigation.reset();\n  }\n}\n",
    "import {Injectable} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {NavigationMode} from './navigation-mode.interface';\nimport {navigationModeFactory} from './navigation-mode.provider';\n\n/**\n * The internal model/state of a wizard.\n * This model contains:\n * - an array with all steps the wizard contains\n * - the index of the step the wizard currently resides inside\n * - information about the completeness of the wizard\n * - some additional helper methods\n *\n * @author Marc Arndt\n */\n@Injectable()\nexport class WizardState {\n  /**\n   * The initial step index, as taken from the [[WizardComponent]]\n   */\n  private _defaultStepIndex = 0;\n\n  /**\n   * An array representation of all wizard steps belonging to this model\n   */\n  public wizardSteps: Array<WizardStep> = [];\n\n  /**\n   * Sets the initial default step.\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n   *\n   * @param defaultStepIndex The new default wizard step index\n   */\n  public set defaultStepIndex(defaultStepIndex) {\n    this._defaultStepIndex = defaultStepIndex;\n  }\n\n  /**\n   * The initial step index.\n   * This value can be either:\n   * - the index of a wizard step with a `selected` directive, or\n   * - the default step index, set in the [[WizardComponent]]\n   */\n  public get defaultStepIndex(): number {\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\n\n    if (foundDefaultStep) {\n      return this.getIndexOfStep(foundDefaultStep);\n    } else {\n      return this._defaultStepIndex;\n    }\n  };\n\n  /**\n   * The index of the currently visible and selected step inside the wizardSteps QueryList.\n   * If this wizard contains no steps, currentStepIndex is -1\n   */\n  public currentStepIndex = -1;\n\n  /**\n   * The navigation mode used to navigate inside the wizard\n   */\n  public navigationMode: NavigationMode;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  public disableNavigationBar: boolean;\n\n  /**\n   * The WizardStep object belonging to the currently visible and selected step.\n   * The currentStep is always the currently selected wizard step.\n   * The currentStep can be either completed, if it was visited earlier,\n   * or not completed, if it is visited for the first time or its state is currently out of date.\n   *\n   * If this wizard contains no steps, currentStep is null\n   */\n  public get currentStep(): WizardStep {\n    if (this.hasStep(this.currentStepIndex)) {\n      return this.wizardSteps[this.currentStepIndex];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * The completeness of the wizard.\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n   */\n  public get completed(): boolean {\n    return this.wizardSteps.every(step => step.completed || step.optional);\n  }\n\n  /**\n   * Constructor\n   */\n  constructor() {\n  }\n\n  /**\n   * Updates the navigation mode to the navigation mode with the given name\n   *\n   * @param updatedNavigationMode The name of the new navigation mode\n   */\n  updateNavigationMode(updatedNavigationMode: string): void {\n    this.navigationMode = navigationModeFactory(updatedNavigationMode, this);\n  }\n\n  /**\n   * Updates the wizard steps to the new array\n   *\n   * @param updatedWizardSteps The updated wizard steps\n   */\n  updateWizardSteps(updatedWizardSteps: Array<WizardStep>): void {\n    // the wizard is currently not in the initialization phase\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n      this.currentStepIndex = updatedWizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n    }\n\n    this.wizardSteps = updatedWizardSteps;\n  }\n\n  /**\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n   *\n   * @param stepIndex The to be checked index of a step inside this wizard\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n   */\n  hasStep(stepIndex: number): boolean {\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n  }\n\n  /**\n   * Checks if this wizard has a previous step, compared to the current step\n   *\n   * @returns True if this wizard has a previous step before the current step\n   */\n  hasPreviousStep(): boolean {\n    return this.hasStep(this.currentStepIndex - 1);\n  }\n\n  /**\n   * Checks if this wizard has a next step, compared to the current step\n   *\n   * @returns True if this wizard has a next step after the current step\n   */\n  hasNextStep(): boolean {\n    return this.hasStep(this.currentStepIndex + 1);\n  }\n\n  /**\n   * Checks if this wizard is currently inside its last step\n   *\n   * @returns True if the wizard is currently inside its last step\n   */\n  isLastStep(): boolean {\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n  }\n\n  /**\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\n   * If no [[WizardStep]] exists at the given index an Error is thrown\n   *\n   * @param stepIndex The given index\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n   */\n  getStepAtIndex(stepIndex: number): WizardStep {\n    if (!this.hasStep(stepIndex)) {\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\n    }\n\n    return this.wizardSteps[stepIndex];\n  }\n\n  /**\n   * Finds the index of the step with the given `stepId`.\n   * If no step with the given `stepId` exists, `-1` is returned\n   *\n   * @param stepId The given step id\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n   */\n  getIndexOfStepWithId(stepId: string): number {\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\n  }\n\n  /**\n   * Finds the index of the given [[WizardStep]] `step`.\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n   *\n   * @param step The given [[WizardStep]]\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\n   */\n  getIndexOfStep(step: WizardStep): number {\n    return this.wizardSteps.indexOf(step);\n  }\n\n  /**\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n   *\n   * @param destinationStep The given destination step\n   * @returns The calculated [[MovingDirection]]\n   */\n  getMovingDirection(destinationStep: number): MovingDirection {\n    let movingDirection: MovingDirection;\n\n    if (destinationStep > this.currentStepIndex) {\n      movingDirection = MovingDirection.Forwards;\n    } else if (destinationStep < this.currentStepIndex) {\n      movingDirection = MovingDirection.Backwards;\n    } else {\n      movingDirection = MovingDirection.Stay;\n    }\n\n    return movingDirection;\n  }\n}\n",
    "import {FreeNavigationMode} from './free-navigation-mode';\nimport {SemiStrictNavigationMode} from './semi-strict-navigation-mode';\nimport {StrictNavigationMode} from './strict-navigation-mode';\n\nimport {NavigationMode} from './navigation-mode.interface';\nimport {WizardState} from './wizard-state.model';\n\n/**\n * A factory method used to create [[NavigationMode]] instances\n *\n * @param navigationMode The name of the to be used navigation mode\n * @param wizardState The wizard state of the wizard\n * @returns The created [[NavigationMode]]\n */\nexport function navigationModeFactory(navigationMode: string, wizardState: WizardState): NavigationMode {\n  switch (navigationMode) {\n    case 'free':\n      return new FreeNavigationMode(wizardState);\n    case 'semi-strict':\n      return new SemiStrictNavigationMode(wizardState);\n    case 'strict':\n    default:\n      return new StrictNavigationMode(wizardState);\n  }\n};\n",
    "import {NavigationMode} from './navigation-mode.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate with strict limitations.\n * The user can only navigation to a given destination step, if:\n * - the current step can be exited in the direction of the destination step\n * - all previous steps to the destination step have been completed or are optional\n *\n * @author Marc Arndt\n */\nexport class StrictNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - all previous steps to the destination step have been completed or are optional\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const allPreviousStepsComplete = (previous: boolean) => {\n      if (previous) {\n        return Promise.resolve(this.wizardState.wizardSteps\n          .filter((step, index) => index < destinationIndex && index !== this.wizardState.currentStepIndex)\n          .every(step => step.completed || step.optional)\n        );\n      } else {\n        return Promise.resolve(false);\n      }\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep)\n      .then(allPreviousStepsComplete);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - all steps between the old current step and the destination step are marked as incomplete\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        // set all steps after the destination step to incomplete\n        this.wizardState.wizardSteps\n          .filter((step, index) => this.wizardState.currentStepIndex > destinationIndex && index > destinationIndex)\n          .forEach(step => step.completed = false);\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  isNavigable(destinationIndex: number): boolean {\n    // a wizard step can be navigated to through the navigation bar, iff it's located before the current wizard step\n    return destinationIndex < this.wizardState.currentStepIndex;\n  }\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // at least one step is before the default step, that is not optional\n    const illegalDefaultStep = this.wizardState.wizardSteps\n      .filter((step, index) => index < this.wizardState.defaultStepIndex)\n      .some(step => !step.optional);\n\n    if (illegalDefaultStep) {\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} is located after a non optional step`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n",
    "import {NavigationMode} from './navigation-mode.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate with some limitations.\n * The user can only navigation to a given destination step, if:\n * - the current step can be exited in the direction of the destination step\n * - a completion step can only be entered, if all \"normal\" wizard steps have been completed\n *\n * @author Marc Arndt\n */\nexport class SemiStrictNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - all \"normal\" wizard steps have been completed, are optional or selected, or the destination step isn't a completion step\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    // provide the destination step as a lambda in case the index doesn't exist (i.e. hasStep === false)\n    const destinationStep = (previous: boolean) => {\n      if (previous) {\n        const allNormalStepsCompleted = this.wizardState.wizardSteps\n          .filter((step, index) => index < destinationIndex)\n          .every(step => step.completed || step.optional || step.selected);\n\n        return Promise.resolve(\n          !(this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) || allNormalStepsCompleted);\n      } else {\n        return Promise.resolve(false);\n      }\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep)\n      .then(destinationStep);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isNavigable(destinationIndex: number): boolean {\n    if (this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) {\n      // a completion step can only be entered, if all previous steps have been completed, are optional, or selected\n      return this.wizardState.wizardSteps.filter((step, index) => index < destinationIndex)\n        .every(step => step.completed || step.optional || step.selected);\n    } else {\n      // a \"normal\" step can always be entered\n      return true;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // the default step is a completion step and the wizard contains more than one step\n    const defaultCompletionStep = this.wizardState.getStepAtIndex(this.wizardState.defaultStepIndex) instanceof WizardCompletionStep &&\n      this.wizardState.wizardSteps.length !== 1;\n\n    if (defaultCompletionStep) {\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} references a completion step`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n",
    "import {WizardStep} from './wizard-step.interface';\nimport {MovingDirection} from './moving-direction.enum';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\nexport abstract class WizardCompletionStep extends WizardStep {\n  /**\n   * @inheritDoc\n   */\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * @inheritDoc\n   */\n  public canExit: ((direction: MovingDirection) => boolean) | boolean = false;\n\n  /**\n   * @inheritDoc\n   */\n  public enter(direction: MovingDirection): void {\n    this.completed = true;\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public exit(direction: MovingDirection): void {\n    // set this completion step as incomplete\n    this.completed = false;\n    this.stepExit.emit(direction);\n  }\n}\n",
    "import {NavigationMode} from './navigation-mode.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate without any limitations,\n * as long as the current step can be exited in the given direction\n *\n * @author Marc Arndt\n */\nexport class FreeNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  isNavigable(destinationIndex: number): boolean {\n    return true;\n  }\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n",
    "import {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * An interface describing the basic functionality, which must be provided by a navigation mode.\n * A navigation mode manages the navigation between different wizard steps, this contains the validation, if a step transition can be done\n *\n * @author Marc Arndt\n */\nexport abstract class NavigationMode {\n  constructor(protected wizardState: WizardState) {\n  }\n\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n   */\n  abstract canGoToStep(destinationIndex: number): Promise<boolean>;\n\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   * If this is not possible, the current wizard step should be exited and then reentered with `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination step\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  abstract goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void;\n\n  /**\n   * Checks, whether the wizard step, located at the given index, is can be navigated to\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns True if the step can be navigated to, false otherwise\n   */\n  abstract isNavigable(destinationIndex: number): boolean;\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  abstract reset(): void;\n\n  /**\n   * Tries to transition the wizard to the previous step from the `currentStep`\n   */\n  goToPreviousStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    if (this.wizardState.hasPreviousStep()) {\n      this.goToStep(this.wizardState.currentStepIndex - 1, preFinalize, postFinalize);\n    }\n  }\n\n  /**\n   * Tries to transition the wizard to the next step from the `currentStep`\n   */\n  goToNextStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    if (this.wizardState.hasNextStep()) {\n      this.goToStep(this.wizardState.currentStepIndex + 1, preFinalize, postFinalize);\n    }\n  }\n}\n",
    "import {MovingDirection} from './moving-direction.enum';\nimport {WizardStepTitleDirective} from '../directives/wizard-step-title.directive';\nimport {ContentChild, EventEmitter, HostBinding, Input, Output} from '@angular/core';\nimport {isBoolean} from 'util';\nimport {NavigationSymbol} from './navigation-symbol.interface';\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\nexport abstract class WizardStep {\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is then shown inside the navigation bar.\n   * Compared to `stepTitle` this property can contain any html content and not only plain text\n   */\n  @ContentChild(WizardStepTitleDirective)\n  public stepTitleTemplate: WizardStepTitleDirective;\n\n  /**\n   * A step id, unique to the step\n   */\n  @Input()\n  public stepId: string;\n\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is only shown inside the navigation bar, if `stepTitleTemplate` is not defined or null.\n   */\n  @Input()\n  public stepTitle: string;\n\n  /**\n   * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n   */\n  @Input()\n  public navigationSymbol: NavigationSymbol = { symbol: '' };\n\n  /**\n   * A boolean describing if the wizard step has been completed\n   */\n  public completed = false;\n\n  /**\n   * A boolean describing if the wizard step is currently selected\n   */\n  public selected = false;\n\n  /**\n   * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n   */\n  public defaultSelected = false;\n\n  /**\n   * A boolean describing if the wizard step is an optional step\n   */\n  public optional = false;\n\n  /**\n   * A function or boolean deciding, if this step can be entered\n   */\n  @Input()\n  public canEnter: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * A function or boolean deciding, if this step can be exited\n   */\n  @Input()\n  public canExit: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * This [[EventEmitter]] is called when the step is entered.\n   * The bound method should be used to do initialization work.\n   */\n  @Output()\n  public stepEnter: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * This [[EventEmitter]] is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * Returns if this wizard step should be visible to the user.\n   * If the step should be visible to the user false is returned, otherwise true\n   */\n  @HostBinding('hidden')\n  public get hidden(): boolean {\n    return !this.selected;\n  }\n\n  /**\n   * This method returns true, if this wizard step can be transitioned with a given direction.\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n   *\n   * @param condition A condition variable, deciding if the step can be transitioned\n   * @param direction The direction in which this step should be transitioned\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n   */\n  private static canTransitionStep(condition: ((direction: MovingDirection) => boolean) |\n                                     ((direction: MovingDirection) => Promise<boolean>) |\n                                     boolean,\n                                   direction: MovingDirection): Promise<boolean> {\n    if (isBoolean(condition)) {\n      return Promise.resolve(condition as boolean);\n    } else if (condition instanceof Function) {\n      return Promise.resolve(condition(direction));\n    } else {\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\n    }\n  }\n\n  /**\n   * A function called when the step is entered\n   *\n   * @param direction The direction in which the step is entered\n   */\n  public enter(direction: MovingDirection): void {\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * A function called when the step is exited\n   *\n   * @param direction The direction in which the step is exited\n   */\n  public exit(direction: MovingDirection) {\n    this.stepExit.emit(direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be entered from the given direction.\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be entered\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n   */\n  public canEnterStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canEnter, direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be exited into given direction.\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be left\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n   */\n  public canExitStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canExit, direction);\n  }\n}\n",
    "/**\n * Created by marc on 01.06.17.\n */\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n})\nexport class WizardStepTitleDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n   */\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
